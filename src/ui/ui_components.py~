import streamlit as st
import pandas as pd
from src.config.config_settings import SQL_SCHEMA
from src.services.services_gpt import GPTService
from src.services.services_pdf import PDFService
from src.services.services_data import DataService


def render_upload():
    st.header("Upload de Currículos")

    arquivos = st.file_uploader(
        "Selecione os PDFs dos currículos",
        type="pdf",
        accept_multiple_files=True
    )

    if arquivos:
        gpt_service = GPTService()
        pdf_service = PDFService()
        data_service = DataService()

        for arquivo in arquivos:
            with st.spinner(f'Processando {arquivo.name}...'):
                try:
                    texto_pdf = pdf_service.extrair_texto(arquivo)
                    dados = gpt_service.analisar_curriculo(texto_pdf)
                    data_service.salvar_profissional(dados, texto_pdf)
                    st.success(f"✅ {arquivo.name} processado com sucesso")
                except Exception as e:
                    st.error(f"❌ Erro ao processar {arquivo.name}: {e}")


def render_viewer():
    st.header("Visualização dos Profissionais")

    # Filtros
    col1, col2, col3 = st.columns(3)

    with col1:
        nome_filtro = st.text_input("Filtrar por nome:")
    with col2:
        profissao_filtro = st.text_input("Filtrar por profissão:")
    with col3:
        area_filtro = st.text_input("Filtrar por área de atuação:")

    filtros = {}
    if nome_filtro:
        filtros['nome'] = nome_filtro
    if profissao_filtro:
        filtros['profissao'] = profissao_filtro
    if area_filtro:
        filtros['area_atuacao'] = area_filtro

    try:
        data_service = DataService()
        dados = data_service.buscar_profissionais(filtros)

        if dados:
            # Converter dados para DataFrame
            df = pd.DataFrame(dados)

            # Exibir métricas
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Total de Profissionais", len(df))
            with col2:
                st.metric("Profissões Únicas", df['profissao'].nunique())
            with col3:
                st.metric("Idade Média", round(df['idade'].mean(), 1))
            with col4:
                st.metric("Áreas de Atuação", df['areas_atuacao'].nunique())

            # Exibir tabela detalhada
            st.dataframe(df)

            # Gráficos
            col1, col2 = st.columns(2)
            with col1:
                profissoes_count = df['profissao'].value_counts()
                st.bar_chart(profissoes_count)
                st.caption("Distribuição de Profissões")

            with col2:
                areas_count = df['areas_atuacao'].str.split(',').explode().value_counts()
                st.bar_chart(areas_count)
                st.caption("Áreas de Atuação mais Comuns")

        else:
            st.info("Nenhum profissional encontrado com os filtros aplicados")

    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")


def render_query():
    st.header("Consultas Personalizadas")

    # Exemplos de consultas
    st.sidebar.subheader("Exemplos de Consultas")
    exemplos = {
        "Profissionais por Área": "Encontre todos os profissionais da área de desenvolvimento",
        "Experiência Média": "Calcule a média de anos de experiência por área de atuação",
        "Skills mais Comuns": "Liste as habilidades mais comuns entre os profissionais",
        "Multilíngues": "Liste profissionais que falam 3 ou mais idiomas"
    }

    for titulo, exemplo in exemplos.items():
        if st.sidebar.button(titulo):
            st.session_state['query_prompt'] = exemplo

    # Campo de consulta
    prompt = st.text_area(
        "Descreva sua consulta:",
        value=st.session_state.get('query_prompt', ''),
        height=100,
        help="Descreva em português o que você quer consultar"
    )

    if st.button("Consultar"):
        try:
            with st.spinner("Gerando consulta..."):
                gpt_service = GPTService()
                data_service = DataService()

                # Gerar e mostrar query
                query = gpt_service.gerar_query_sql(prompt, SQL_SCHEMA)

                if query:
                    # Mostrar a query gerada
                    with st.expander("Ver SQL Gerado"):
                        st.code(query, language="sql")

                    # Executar query
                    try:
                        with st.spinner("Executando consulta..."):
                            resultados = data_service.executar_query(query)

                        if resultados:
                            # Converter para DataFrame
                            df = pd.DataFrame(resultados)

                            # Mostrar resultados em tabela
                            st.subheader("Resultados")
                            st.dataframe(df)

                            # Tentar gerar visualização apropriada
                            numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns
                            if len(df) > 1 and len(numeric_cols) > 0:
                                st.subheader("Visualização")

                                # Se tiver apenas uma coluna numérica
                                if len(numeric_cols) == 1:
                                    col_name = numeric_cols[0]
                                    # Usar a primeira coluna não numérica como índice, se existir
                                    non_numeric_cols = df.select_dtypes(exclude=['int64', 'float64']).columns
                                    if len(non_numeric_cols) > 0:
                                        index_col = non_numeric_cols[0]
                                        chart_data = df.set_index(index_col)[col_name]
                                    else:
                                        chart_data = df[col_name]
                                    st.bar_chart(chart_data)

                                # Se tiver múltiplas colunas numéricas
                                else:
                                    # Deixar usuário escolher as colunas para visualizar
                                    cols_to_plot = st.multiselect(
                                        "Escolha as colunas para visualizar:",
                                        numeric_cols,
                                        default=[numeric_cols[0]] if len(numeric_cols) > 0 else []
                                    )
                                    if cols_to_plot:
                                        st.bar_chart(df[cols_to_plot])
                        else:
                            st.info("Nenhum resultado encontrado")

                    except Exception as e:
                        st.error(f"Erro ao executar a consulta: {str(e)}")
                else:
                    st.error("Não foi possível gerar uma consulta SQL válida")

        except Exception as e:
            st.error(f"Erro na consulta: {str(e)}")